@charset "utf-8";
/*! inboxes - Mobiletic @2019 */
@import "scss/base/all";
@import "scss/functions/all";
@import "scss/helpers/all";
@import "scss/layout/all";

@import "style";
/* ************************* INBOXES DECLARATION **************************** */
@mixin inboxes($breakpoint) {
  @include vbox-layout($breakpoint);
  @include hbox-layout($breakpoint);

  @include wrap($breakpoint);
  @include wrap-items($breakpoint);

  @include flex-none($breakpoint);

  @for $i from 0 through 5 {
    @include flex($i, $breakpoint);
  }

  @for $i from -5 through 5 {
    @include flex-order($i, $breakpoint);
  }

  $spacing-count: length($spacing-map);
  @each $i, $v in $spacing-map {
    // @for $i from 0 through $spacing-count {
    @include spacing($i, $breakpoint);
  }

  @for $i from 1 through 5 {
    @include wrap-layout($i, $breakpoint);
  }

  @include alignments($breakpoint);
  @include positions($breakpoint);

  @include hide($breakpoint);

  //@include table-layout($breakpoint);
}

/* ************************* Responsive breakpoints **************************** */
$breakpoints-count: length($breakpoints);

@for $i from 1 through $breakpoints-count {
  $bp: nth(map-keys($breakpoints), $i);
  $prev-bp: if($i > 1, nth(map-keys($breakpoints), $i - 1), null);
  @if $i == 1 {
    @include respond-below($bp) {
      @include inboxes($bp);
    }
  } @else if $i == $breakpoints-count {
    @include respond-above($prev-bp) {
      @include inboxes($bp);
    }
  } @else {
    @include respond-between($prev-bp, $bp) {
      @include inboxes($bp);
    }
  }
}

@media print {
  @include inboxes("pr");
}

@import "scss/elements/all";
@import "scss/components/all";
@import "scss/hacks/all";
